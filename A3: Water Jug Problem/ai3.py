# -*- coding: utf-8 -*-
"""AI3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YW5Yu0hjVEU4v5E2Xkh0Uz_MiQRLQzsW
"""

state=[0,0]
capacity  = [4,3]
goal = 2
path=[]

def nextState(j1 , j2 , i  ):
  if(i==0):
    #fill jug 1 
    j1=4
  elif(i==1):
    # filljug 2 
    j2 =3 
  elif (i==2):
    # pour j1->2 
    (provider , rider)=(j1, j2)
    gap = 3-j2
    (j1, j2)= (j1 -min(gap , provider) , j2+min(gap, provider))
 

  elif (i==3):
    # pour j2->j1 
    gap = 4-j1
    provider = j2 
    rider = j1 
    (j1, j2)= (j1 +min(gap , provider) , j2-min(gap, provider))
 
  return [j1,j2]

m={}
def solve(cs):
   
   if ((cs[0], cs[1]) in m):
     return False 
         
   m[(cs[0], cs[1])] = 1
   path.append(cs)
   if(cs[0]==goal or cs[1]==goal):
     return True  
   for i in range(0,4):
     ns = nextState(cs[0] , cs[1] , i )
    #  print(ns,i)
     if(solve(ns)):
      
       return True 
   path.pop()
   return False 

solve(state)

for ele in path:
  print(ele )

"""# WATER JUG PROBLEM **bold text**"""