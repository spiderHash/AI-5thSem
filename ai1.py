# -*- coding: utf-8 -*-
"""AI1-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qT6AL1Q5UYVi_85TBQLosvMIJGO7TbeG
"""



"""AI-1 bfs and dfs using tree module   

"""

import math ; 

class newNode:
 
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.parent=None
        self.level=None
    
arr = [1,2,3,4,5,6];
 

def sendNUDE(arr):
  nodes={}
  for i in range (1 , len(arr)):
    tenp=newNode(arr[i])
    print(tenp.data)
    return nodes 



def dfs(root):
    if(root==None):
      return 
    print(root.data)
    dfs(root.left)
    dfs(root.right)
def bfs(root):
  if root is None: 
    return  
  queue = [root]
  while queue:
    curr = queue.pop(0)
    print(curr.data, end="->" )
    if curr.left :
      queue.append(curr.left)
    if curr.right:
      queue.append(curr.right)
    
 

def constructBinaryTree(nodes):   
    for i in range(len(nodes)):
        node = nodes[i]
        if node is not None:
          if(2*i+1<len(nodes)):
            node.left = nodes[2 * i + 1]
            nodes[2 * i + 1].parent = node
                 
          if(2*i+2<len(nodes)):
            node.right = nodes[2 * i + 2]
            nodes[2 * i + 2].parent = node
            
          node.level = int(math.log(i+1,2))
    return nodes[0] if nodes else None

nodes = [  newNode(x) for x in arr]


 
 
dfs(root)
bfs(root)
# BFS(root)





"""## **AI3 Water jug problem decantation t**"""



